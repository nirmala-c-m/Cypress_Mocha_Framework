{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 1,
    "pending": 0,
    "failures": 2,
    "start": "2024-07-15T07:01:52.084Z",
    "end": "2024-07-15T07:02:08.467Z",
    "duration": 16383,
    "testsRegistered": 3,
    "passPercent": 33.33333333333333,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "49ab31c0-df26-4ba5-a63c-272642946d13",
      "title": "",
      "fullFile": "cypress/e2e/ login.spec.cy.js",
      "file": "cypress/e2e/ login.spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ad347844-ef27-4282-9944-462b71944d81",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log in using first set of data from CSV",
              "fullTitle": "Login should log in using first set of data from CSV",
              "timedOut": null,
              "duration": 8343,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@loginData').then(loginData => {\n  const rows = (0, _papaparse.parse)(loginData, {\n    header: true\n  }).data; // Parsing CSV data into rows \n  const loginRow = rows[0]; // Access the first row directly\n  cy.login(loginRow.username, loginRow.password); // Login method defined in command.js\n  cy.url().should('include', 'https://demo.guru99.com/test/newtours/login_sucess.php');\n  cy.title().should('eq', 'Login: Mercury Tours');\n});",
              "err": {},
              "uuid": "925a5b0b-ace6-4765-8562-34f4a57e0272",
              "parentUUID": "ad347844-ef27-4282-9944-462b71944d81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log in using second set of data from CSV",
              "fullTitle": "Login should log in using second set of data from CSV",
              "timedOut": null,
              "duration": 3487,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('@loginData').then(loginData => {\n  const rows = (0, _papaparse.parse)(loginData, {\n    header: true\n  }).data; // Parsing CSV data into rows \n  const loginRow = rows[1]; // Access the second row directly\n  cy.login(loginRow.username, loginRow.password); // Login method defined in command.js\n  cy.url().should('include', 'https://demo.guru99.com/test/newtours/login_sucess.php');\n  cy.title().should('eq', 'Login: Mercury Tours');\n});",
              "err": {
                "message": "CypressError: `cy.type()` cannot accept an empty string. You need to actually type something.\n\nhttps://on.cypress.io/type",
                "estack": "CypressError: `cy.type()` cannot accept an empty string. You need to actually type something.\n\nhttps://on.cypress.io/type\n    at Context.type (https://demo.guru99.com/__cypress/runner/cypress_runner.js:114900:68)\n    at wrapped (https://demo.guru99.com/__cypress/runner/cypress_runner.js:138024:19)\nFrom Your Spec Code:\n    at LoginPage.fillUsername (webpack://cypressapiautomation/./cypress/page-objects/LoginPage.js:11:9)\n    at Context.eval (webpack://cypressapiautomation/./cypress/support/commands.js:6:14)",
                "diff": null
              },
              "uuid": "ff0d3e80-3a87-4aa7-8a5e-07d5422c062d",
              "parentUUID": "ad347844-ef27-4282-9944-462b71944d81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log in using third set of data from CSV",
              "fullTitle": "Login should log in using third set of data from CSV",
              "timedOut": null,
              "duration": 288,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('@loginData').then(loginData => {\n  const rows = (0, _papaparse.parse)(loginData, {\n    header: true\n  }).data; // Parsing CSV data into rows \n  const loginRow = rows[2]; // Access the third row directly\n  cy.login(loginRow.username, loginRow.password); // Login method defined in command.js\n  cy.url().should('include', 'https://demo.guru99.com/test/newtours/login_sucess.php');\n  cy.title().should('eq', 'Login: Mercury Tours');\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'username')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'username')\n    at Context.eval (webpack://cypressapiautomation/./cypress/e2e/ login.spec.cy.js:38:24)",
                "diff": null
              },
              "uuid": "218b9a93-2e0f-4bac-a61e-fcc9479f1b5b",
              "parentUUID": "ad347844-ef27-4282-9944-462b71944d81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "925a5b0b-ace6-4765-8562-34f4a57e0272"
          ],
          "failures": [
            "ff0d3e80-3a87-4aa7-8a5e-07d5422c062d",
            "218b9a93-2e0f-4bac-a61e-fcc9479f1b5b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}